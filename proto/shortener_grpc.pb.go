// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shortener_ShortenURL_FullMethodName      = "/github.com.alaleks.shortener.Shortener/ShortenURL"
	Shortener_GetStat_FullMethodName         = "/github.com.alaleks.shortener.Shortener/GetStat"
	Shortener_GetUsersURL_FullMethodName     = "/github.com.alaleks.shortener.Shortener/GetUsersURL"
	Shortener_ShortenURLBatch_FullMethodName = "/github.com.alaleks.shortener.Shortener/ShortenURLBatch"
	Shortener_ShortenDelete_FullMethodName   = "/github.com.alaleks.shortener.Shortener/ShortenDelete"
	Shortener_StatsInternal_FullMethodName   = "/github.com.alaleks.shortener.Shortener/StatsInternal"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	ShortenURL(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error)
	GetStat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	GetUsersURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersURL, error)
	ShortenURLBatch(ctx context.Context, in *ShortenBatchRequest, opts ...grpc.CallOption) (*ShortenBatchResponse, error)
	ShortenDelete(ctx context.Context, in *ShortenDeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	StatsInternal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsInternalReponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) ShortenURL(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error) {
	out := new(ShortenResponse)
	err := c.cc.Invoke(ctx, Shortener_ShortenURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetStat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, Shortener_GetStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetUsersURL(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UsersURL, error) {
	out := new(UsersURL)
	err := c.cc.Invoke(ctx, Shortener_GetUsersURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) ShortenURLBatch(ctx context.Context, in *ShortenBatchRequest, opts ...grpc.CallOption) (*ShortenBatchResponse, error) {
	out := new(ShortenBatchResponse)
	err := c.cc.Invoke(ctx, Shortener_ShortenURLBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) ShortenDelete(ctx context.Context, in *ShortenDeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Shortener_ShortenDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) StatsInternal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsInternalReponse, error) {
	out := new(StatsInternalReponse)
	err := c.cc.Invoke(ctx, Shortener_StatsInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	ShortenURL(context.Context, *ShortenRequest) (*ShortenResponse, error)
	GetStat(context.Context, *StatRequest) (*StatResponse, error)
	GetUsersURL(context.Context, *Empty) (*UsersURL, error)
	ShortenURLBatch(context.Context, *ShortenBatchRequest) (*ShortenBatchResponse, error)
	ShortenDelete(context.Context, *ShortenDeleteRequest) (*Empty, error)
	StatsInternal(context.Context, *Empty) (*StatsInternalReponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) ShortenURL(context.Context, *ShortenRequest) (*ShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenURL not implemented")
}
func (UnimplementedShortenerServer) GetStat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStat not implemented")
}
func (UnimplementedShortenerServer) GetUsersURL(context.Context, *Empty) (*UsersURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersURL not implemented")
}
func (UnimplementedShortenerServer) ShortenURLBatch(context.Context, *ShortenBatchRequest) (*ShortenBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenURLBatch not implemented")
}
func (UnimplementedShortenerServer) ShortenDelete(context.Context, *ShortenDeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenDelete not implemented")
}
func (UnimplementedShortenerServer) StatsInternal(context.Context, *Empty) (*StatsInternalReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsInternal not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_ShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).ShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_ShortenURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).ShortenURL(ctx, req.(*ShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetStat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetUsersURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetUsersURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetUsersURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetUsersURL(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_ShortenURLBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).ShortenURLBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_ShortenURLBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).ShortenURLBatch(ctx, req.(*ShortenBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_ShortenDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).ShortenDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_ShortenDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).ShortenDelete(ctx, req.(*ShortenDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_StatsInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).StatsInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_StatsInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).StatsInternal(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.alaleks.shortener.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenURL",
			Handler:    _Shortener_ShortenURL_Handler,
		},
		{
			MethodName: "GetStat",
			Handler:    _Shortener_GetStat_Handler,
		},
		{
			MethodName: "GetUsersURL",
			Handler:    _Shortener_GetUsersURL_Handler,
		},
		{
			MethodName: "ShortenURLBatch",
			Handler:    _Shortener_ShortenURLBatch_Handler,
		},
		{
			MethodName: "ShortenDelete",
			Handler:    _Shortener_ShortenDelete_Handler,
		},
		{
			MethodName: "StatsInternal",
			Handler:    _Shortener_StatsInternal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
